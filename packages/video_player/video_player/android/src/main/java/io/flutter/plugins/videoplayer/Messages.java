// Autogenerated from Pigeon (v0.1.23), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package io.flutter.plugins.videoplayer;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.StandardMessageCodec;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Messages {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class TextureMessage {
    private Long textureId;
    public Long getTextureId() { return textureId; }
    public void setTextureId(Long setterArg) { this.textureId = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("textureId", textureId);
      return toMapResult;
    }
    static TextureMessage fromMap(Map<String, Object> map) {
      TextureMessage fromMapResult = new TextureMessage();
      Object textureId = map.get("textureId");
      fromMapResult.textureId = (textureId == null) ? null : ((textureId instanceof Integer) ? (Integer)textureId : (Long)textureId);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class CreateMessage {
    private String asset;
    public String getAsset() { return asset; }
    public void setAsset(String setterArg) { this.asset = setterArg; }

    private String uri;
    public String getUri() { return uri; }
    public void setUri(String setterArg) { this.uri = setterArg; }

    private String packageName;
    public String getPackageName() { return packageName; }
    public void setPackageName(String setterArg) { this.packageName = setterArg; }

    private String formatHint;
    public String getFormatHint() { return formatHint; }
    public void setFormatHint(String setterArg) { this.formatHint = setterArg; }

    private Map<Object, Object> httpHeaders;
    public Map<Object, Object> getHttpHeaders() { return httpHeaders; }
    public void setHttpHeaders(Map<Object, Object> setterArg) { this.httpHeaders = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("asset", asset);
      toMapResult.put("uri", uri);
      toMapResult.put("packageName", packageName);
      toMapResult.put("formatHint", formatHint);
      toMapResult.put("httpHeaders", httpHeaders);
      return toMapResult;
    }
    static CreateMessage fromMap(Map<String, Object> map) {
      CreateMessage fromMapResult = new CreateMessage();
      Object asset = map.get("asset");
      fromMapResult.asset = (String)asset;
      Object uri = map.get("uri");
      fromMapResult.uri = (String)uri;
      Object packageName = map.get("packageName");
      fromMapResult.packageName = (String)packageName;
      Object formatHint = map.get("formatHint");
      fromMapResult.formatHint = (String)formatHint;
      Object httpHeaders = map.get("httpHeaders");
      fromMapResult.httpHeaders = (Map<Object, Object>)httpHeaders;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class LoopingMessage {
    private Long textureId;
    public Long getTextureId() { return textureId; }
    public void setTextureId(Long setterArg) { this.textureId = setterArg; }

    private Boolean isLooping;
    public Boolean getIsLooping() { return isLooping; }
    public void setIsLooping(Boolean setterArg) { this.isLooping = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("textureId", textureId);
      toMapResult.put("isLooping", isLooping);
      return toMapResult;
    }
    static LoopingMessage fromMap(Map<String, Object> map) {
      LoopingMessage fromMapResult = new LoopingMessage();
      Object textureId = map.get("textureId");
      fromMapResult.textureId = (textureId == null) ? null : ((textureId instanceof Integer) ? (Integer)textureId : (Long)textureId);
      Object isLooping = map.get("isLooping");
      fromMapResult.isLooping = (Boolean)isLooping;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class VolumeMessage {
    private Long textureId;
    public Long getTextureId() { return textureId; }
    public void setTextureId(Long setterArg) { this.textureId = setterArg; }

    private Double volume;
    public Double getVolume() { return volume; }
    public void setVolume(Double setterArg) { this.volume = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("textureId", textureId);
      toMapResult.put("volume", volume);
      return toMapResult;
    }
    static VolumeMessage fromMap(Map<String, Object> map) {
      VolumeMessage fromMapResult = new VolumeMessage();
      Object textureId = map.get("textureId");
      fromMapResult.textureId = (textureId == null) ? null : ((textureId instanceof Integer) ? (Integer)textureId : (Long)textureId);
      Object volume = map.get("volume");
      fromMapResult.volume = (Double)volume;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PlaybackSpeedMessage {
    private Long textureId;
    public Long getTextureId() { return textureId; }
    public void setTextureId(Long setterArg) { this.textureId = setterArg; }

    private Double speed;
    public Double getSpeed() { return speed; }
    public void setSpeed(Double setterArg) { this.speed = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("textureId", textureId);
      toMapResult.put("speed", speed);
      return toMapResult;
    }
    static PlaybackSpeedMessage fromMap(Map<String, Object> map) {
      PlaybackSpeedMessage fromMapResult = new PlaybackSpeedMessage();
      Object textureId = map.get("textureId");
      fromMapResult.textureId = (textureId == null) ? null : ((textureId instanceof Integer) ? (Integer)textureId : (Long)textureId);
      Object speed = map.get("speed");
      fromMapResult.speed = (Double)speed;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PositionMessage {
    private Long textureId;
    public Long getTextureId() { return textureId; }
    public void setTextureId(Long setterArg) { this.textureId = setterArg; }

    private Long position;
    public Long getPosition() { return position; }
    public void setPosition(Long setterArg) { this.position = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("textureId", textureId);
      toMapResult.put("position", position);
      return toMapResult;
    }
    static PositionMessage fromMap(Map<String, Object> map) {
      PositionMessage fromMapResult = new PositionMessage();
      Object textureId = map.get("textureId");
      fromMapResult.textureId = (textureId == null) ? null : ((textureId instanceof Integer) ? (Integer)textureId : (Long)textureId);
      Object position = map.get("position");
      fromMapResult.position = (position == null) ? null : ((position instanceof Integer) ? (Integer)position : (Long)position);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class MixWithOthersMessage {
    private Boolean mixWithOthers;
    public Boolean getMixWithOthers() { return mixWithOthers; }
    public void setMixWithOthers(Boolean setterArg) { this.mixWithOthers = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("mixWithOthers", mixWithOthers);
      return toMapResult;
    }
    static MixWithOthersMessage fromMap(Map<String, Object> map) {
      MixWithOthersMessage fromMapResult = new MixWithOthersMessage();
      Object mixWithOthers = map.get("mixWithOthers");
      fromMapResult.mixWithOthers = (Boolean)mixWithOthers;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class MuxConfigMessage {
    private Long textureId;
    public Long getTextureId() { return textureId; }
    public void setTextureId(Long setterArg) { this.textureId = setterArg; }

    private String envKey;
    public String getEnvKey() { return envKey; }
    public void setEnvKey(String setterArg) { this.envKey = setterArg; }

    private String playerName;
    public String getPlayerName() { return playerName; }
    public void setPlayerName(String setterArg) { this.playerName = setterArg; }

    private String viewerUserId;
    public String getViewerUserId() { return viewerUserId; }
    public void setViewerUserId(String setterArg) { this.viewerUserId = setterArg; }

    private String pageType;
    public String getPageType() { return pageType; }
    public void setPageType(String setterArg) { this.pageType = setterArg; }

    private String experimentName;
    public String getExperimentName() { return experimentName; }
    public void setExperimentName(String setterArg) { this.experimentName = setterArg; }

    private String subPropertyId;
    public String getSubPropertyId() { return subPropertyId; }
    public void setSubPropertyId(String setterArg) { this.subPropertyId = setterArg; }

    private String playerVersion;
    public String getPlayerVersion() { return playerVersion; }
    public void setPlayerVersion(String setterArg) { this.playerVersion = setterArg; }

    private Long playerInitTime;
    public Long getPlayerInitTime() { return playerInitTime; }
    public void setPlayerInitTime(Long setterArg) { this.playerInitTime = setterArg; }

    private String videoId;
    public String getVideoId() { return videoId; }
    public void setVideoId(String setterArg) { this.videoId = setterArg; }

    private String videoTitle;
    public String getVideoTitle() { return videoTitle; }
    public void setVideoTitle(String setterArg) { this.videoTitle = setterArg; }

    private String videoSeries;
    public String getVideoSeries() { return videoSeries; }
    public void setVideoSeries(String setterArg) { this.videoSeries = setterArg; }

    private String videoVariantName;
    public String getVideoVariantName() { return videoVariantName; }
    public void setVideoVariantName(String setterArg) { this.videoVariantName = setterArg; }

    private String videoVariantId;
    public String getVideoVariantId() { return videoVariantId; }
    public void setVideoVariantId(String setterArg) { this.videoVariantId = setterArg; }

    private String videoLanguageCode;
    public String getVideoLanguageCode() { return videoLanguageCode; }
    public void setVideoLanguageCode(String setterArg) { this.videoLanguageCode = setterArg; }

    private String videoContentType;
    public String getVideoContentType() { return videoContentType; }
    public void setVideoContentType(String setterArg) { this.videoContentType = setterArg; }

    private Long videoDuration;
    public Long getVideoDuration() { return videoDuration; }
    public void setVideoDuration(Long setterArg) { this.videoDuration = setterArg; }

    private String videoStreamType;
    public String getVideoStreamType() { return videoStreamType; }
    public void setVideoStreamType(String setterArg) { this.videoStreamType = setterArg; }

    private String videoProducer;
    public String getVideoProducer() { return videoProducer; }
    public void setVideoProducer(String setterArg) { this.videoProducer = setterArg; }

    private String videoEncodingVariant;
    public String getVideoEncodingVariant() { return videoEncodingVariant; }
    public void setVideoEncodingVariant(String setterArg) { this.videoEncodingVariant = setterArg; }

    private String videoCdn;
    public String getVideoCdn() { return videoCdn; }
    public void setVideoCdn(String setterArg) { this.videoCdn = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("textureId", textureId);
      toMapResult.put("envKey", envKey);
      toMapResult.put("playerName", playerName);
      toMapResult.put("viewerUserId", viewerUserId);
      toMapResult.put("pageType", pageType);
      toMapResult.put("experimentName", experimentName);
      toMapResult.put("subPropertyId", subPropertyId);
      toMapResult.put("playerVersion", playerVersion);
      toMapResult.put("playerInitTime", playerInitTime);
      toMapResult.put("videoId", videoId);
      toMapResult.put("videoTitle", videoTitle);
      toMapResult.put("videoSeries", videoSeries);
      toMapResult.put("videoVariantName", videoVariantName);
      toMapResult.put("videoVariantId", videoVariantId);
      toMapResult.put("videoLanguageCode", videoLanguageCode);
      toMapResult.put("videoContentType", videoContentType);
      toMapResult.put("videoDuration", videoDuration);
      toMapResult.put("videoStreamType", videoStreamType);
      toMapResult.put("videoProducer", videoProducer);
      toMapResult.put("videoEncodingVariant", videoEncodingVariant);
      toMapResult.put("videoCdn", videoCdn);
      return toMapResult;
    }
    static MuxConfigMessage fromMap(Map<String, Object> map) {
      MuxConfigMessage fromMapResult = new MuxConfigMessage();
      Object textureId = map.get("textureId");
      fromMapResult.textureId = (textureId == null) ? null : ((textureId instanceof Integer) ? (Integer)textureId : (Long)textureId);
      Object envKey = map.get("envKey");
      fromMapResult.envKey = (String)envKey;
      Object playerName = map.get("playerName");
      fromMapResult.playerName = (String)playerName;
      Object viewerUserId = map.get("viewerUserId");
      fromMapResult.viewerUserId = (String)viewerUserId;
      Object pageType = map.get("pageType");
      fromMapResult.pageType = (String)pageType;
      Object experimentName = map.get("experimentName");
      fromMapResult.experimentName = (String)experimentName;
      Object subPropertyId = map.get("subPropertyId");
      fromMapResult.subPropertyId = (String)subPropertyId;
      Object playerVersion = map.get("playerVersion");
      fromMapResult.playerVersion = (String)playerVersion;
      Object playerInitTime = map.get("playerInitTime");
      fromMapResult.playerInitTime = (playerInitTime == null) ? null : ((playerInitTime instanceof Integer) ? (Integer)playerInitTime : (Long)playerInitTime);
      Object videoId = map.get("videoId");
      fromMapResult.videoId = (String)videoId;
      Object videoTitle = map.get("videoTitle");
      fromMapResult.videoTitle = (String)videoTitle;
      Object videoSeries = map.get("videoSeries");
      fromMapResult.videoSeries = (String)videoSeries;
      Object videoVariantName = map.get("videoVariantName");
      fromMapResult.videoVariantName = (String)videoVariantName;
      Object videoVariantId = map.get("videoVariantId");
      fromMapResult.videoVariantId = (String)videoVariantId;
      Object videoLanguageCode = map.get("videoLanguageCode");
      fromMapResult.videoLanguageCode = (String)videoLanguageCode;
      Object videoContentType = map.get("videoContentType");
      fromMapResult.videoContentType = (String)videoContentType;
      Object videoDuration = map.get("videoDuration");
      fromMapResult.videoDuration = (videoDuration == null) ? null : ((videoDuration instanceof Integer) ? (Integer)videoDuration : (Long)videoDuration);
      Object videoStreamType = map.get("videoStreamType");
      fromMapResult.videoStreamType = (String)videoStreamType;
      Object videoProducer = map.get("videoProducer");
      fromMapResult.videoProducer = (String)videoProducer;
      Object videoEncodingVariant = map.get("videoEncodingVariant");
      fromMapResult.videoEncodingVariant = (String)videoEncodingVariant;
      Object videoCdn = map.get("videoCdn");
      fromMapResult.videoCdn = (String)videoCdn;
      return fromMapResult;
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface VideoPlayerApi {
    void initialize();
    TextureMessage create(CreateMessage arg);
    void dispose(TextureMessage arg);
    void setLooping(LoopingMessage arg);
    void setVolume(VolumeMessage arg);
    void setPlaybackSpeed(PlaybackSpeedMessage arg);
    void play(TextureMessage arg);
    PositionMessage position(TextureMessage arg);
    void seekTo(PositionMessage arg);
    void pause(TextureMessage arg);
    void setMixWithOthers(MixWithOthersMessage arg);
    void setupMux(MuxConfigMessage arg);

    /** Sets up an instance of `VideoPlayerApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, VideoPlayerApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoPlayerApi.initialize", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.initialize();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoPlayerApi.create", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              CreateMessage input = CreateMessage.fromMap((Map<String, Object>)message);
              TextureMessage output = api.create(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoPlayerApi.dispose", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TextureMessage input = TextureMessage.fromMap((Map<String, Object>)message);
              api.dispose(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoPlayerApi.setLooping", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              LoopingMessage input = LoopingMessage.fromMap((Map<String, Object>)message);
              api.setLooping(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoPlayerApi.setVolume", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              VolumeMessage input = VolumeMessage.fromMap((Map<String, Object>)message);
              api.setVolume(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoPlayerApi.setPlaybackSpeed", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              PlaybackSpeedMessage input = PlaybackSpeedMessage.fromMap((Map<String, Object>)message);
              api.setPlaybackSpeed(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoPlayerApi.play", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TextureMessage input = TextureMessage.fromMap((Map<String, Object>)message);
              api.play(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoPlayerApi.position", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TextureMessage input = TextureMessage.fromMap((Map<String, Object>)message);
              PositionMessage output = api.position(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoPlayerApi.seekTo", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              PositionMessage input = PositionMessage.fromMap((Map<String, Object>)message);
              api.seekTo(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoPlayerApi.pause", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TextureMessage input = TextureMessage.fromMap((Map<String, Object>)message);
              api.pause(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoPlayerApi.setMixWithOthers", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              MixWithOthersMessage input = MixWithOthersMessage.fromMap((Map<String, Object>)message);
              api.setMixWithOthers(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoPlayerApi.setupMux", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              MuxConfigMessage input = MuxConfigMessage.fromMap((Map<String, Object>)message);
              api.setupMux(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
