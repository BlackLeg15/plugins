// Autogenerated from Pigeon (v0.1.21), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import <Foundation/Foundation.h>
@protocol FlutterBinaryMessenger;
@class FlutterError;
@class FlutterStandardTypedData;

NS_ASSUME_NONNULL_BEGIN

@class FLTTextureMessage;
@class FLTCreateMessage;
@class FLTLoopingMessage;
@class FLTVolumeMessage;
@class FLTPlaybackSpeedMessage;
@class FLTPositionMessage;
@class FLTMixWithOthersMessage;
@class FLTMuxConfigMessage;

@interface FLTTextureMessage : NSObject
@property(nonatomic, strong, nullable) NSNumber * textureId;
@end

@interface FLTCreateMessage : NSObject
@property(nonatomic, copy, nullable) NSString * asset;
@property(nonatomic, copy, nullable) NSString * uri;
@property(nonatomic, copy, nullable) NSString * packageName;
@property(nonatomic, copy, nullable) NSString * formatHint;
@property(nonatomic, strong, nullable) NSDictionary * httpHeaders;
@end

@interface FLTLoopingMessage : NSObject
@property(nonatomic, strong, nullable) NSNumber * textureId;
@property(nonatomic, strong, nullable) NSNumber * isLooping;
@end

@interface FLTVolumeMessage : NSObject
@property(nonatomic, strong, nullable) NSNumber * textureId;
@property(nonatomic, strong, nullable) NSNumber * volume;
@end

@interface FLTPlaybackSpeedMessage : NSObject
@property(nonatomic, strong, nullable) NSNumber * textureId;
@property(nonatomic, strong, nullable) NSNumber * speed;
@end

@interface FLTPositionMessage : NSObject
@property(nonatomic, strong, nullable) NSNumber * textureId;
@property(nonatomic, strong, nullable) NSNumber * position;
@end

@interface FLTMixWithOthersMessage : NSObject
@property(nonatomic, strong, nullable) NSNumber * mixWithOthers;
@end

@interface FLTMuxConfigMessage : NSObject
@property(nonatomic, strong, nullable) NSNumber * textureId;
@property(nonatomic, copy, nullable) NSString * envKey;
@property(nonatomic, copy, nullable) NSString * playerName;
@property(nonatomic, copy, nullable) NSString * viewerUserId;
@property(nonatomic, copy, nullable) NSString * pageType;
@property(nonatomic, copy, nullable) NSString * experimentName;
@property(nonatomic, copy, nullable) NSString * subPropertyId;
@property(nonatomic, copy, nullable) NSString * playerVersion;
@property(nonatomic, strong, nullable) NSNumber * playerInitTime;
@property(nonatomic, copy, nullable) NSString * videoId;
@property(nonatomic, copy, nullable) NSString * videoTitle;
@property(nonatomic, copy, nullable) NSString * videoSeries;
@property(nonatomic, copy, nullable) NSString * videoVariantName;
@property(nonatomic, copy, nullable) NSString * videoVariantId;
@property(nonatomic, copy, nullable) NSString * videoLanguageCode;
@property(nonatomic, copy, nullable) NSString * videoContentType;
@property(nonatomic, strong, nullable) NSNumber * videoDuration;
@property(nonatomic, copy, nullable) NSString * videoStreamType;
@property(nonatomic, copy, nullable) NSString * videoProducer;
@property(nonatomic, copy, nullable) NSString * videoEncodingVariant;
@property(nonatomic, copy, nullable) NSString * videoCdn;
@end

@protocol FLTVideoPlayerApi
-(void)initialize:(FlutterError *_Nullable *_Nonnull)error;
-(nullable FLTTextureMessage *)create:(FLTCreateMessage*)input error:(FlutterError *_Nullable *_Nonnull)error;
-(void)dispose:(FLTTextureMessage*)input error:(FlutterError *_Nullable *_Nonnull)error;
-(void)setLooping:(FLTLoopingMessage*)input error:(FlutterError *_Nullable *_Nonnull)error;
-(void)setVolume:(FLTVolumeMessage*)input error:(FlutterError *_Nullable *_Nonnull)error;
-(void)setPlaybackSpeed:(FLTPlaybackSpeedMessage*)input error:(FlutterError *_Nullable *_Nonnull)error;
-(void)play:(FLTTextureMessage*)input error:(FlutterError *_Nullable *_Nonnull)error;
-(nullable FLTPositionMessage *)position:(FLTTextureMessage*)input error:(FlutterError *_Nullable *_Nonnull)error;
-(void)seekTo:(FLTPositionMessage*)input error:(FlutterError *_Nullable *_Nonnull)error;
-(void)pause:(FLTTextureMessage*)input error:(FlutterError *_Nullable *_Nonnull)error;
-(void)setMixWithOthers:(FLTMixWithOthersMessage*)input error:(FlutterError *_Nullable *_Nonnull)error;
-(void)setupMux:(FLTMuxConfigMessage*)input error:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void FLTVideoPlayerApiSetup(id<FlutterBinaryMessenger> binaryMessenger, id<FLTVideoPlayerApi> _Nullable api);

NS_ASSUME_NONNULL_END
